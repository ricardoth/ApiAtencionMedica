// <auto-generated />
using System;
using AtencionMedica.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AtencionMedica.Infraestructure.Migrations
{
    [DbContext(typeof(AtencionMedicaContext))]
    partial class AtencionMedicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AtencionMedica.Domain.Entities.AgendaMedico", b =>
                {
                    b.Property<long>("IdAgendaMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdAgendaMedico"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("HoraFin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoraInicio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdEstadoAgendaMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.HasKey("IdAgendaMedico");

                    b.HasIndex("IdEstadoAgendaMedico");

                    b.HasIndex("IdMedico");

                    b.ToTable("AgendaMedico", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Complicacion", b =>
                {
                    b.Property<int>("IdComplicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComplicacion"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombreComplicacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComplicacion");

                    b.ToTable("Complicacion");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.ComplicacionPaciente", b =>
                {
                    b.Property<int>("IdComplicacionPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComplicacionPaciente"));

                    b.Property<DateTime?>("FecComplicacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdComplicacion")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdComplicacionPaciente");

                    b.HasIndex("IdComplicacion");

                    b.HasIndex("IdPaciente");

                    b.ToTable("ComplicacionPaciente", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Comuna", b =>
                {
                    b.Property<int>("IdComuna")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComuna"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombreComuna")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiglaRegion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComuna");

                    b.ToTable("Comuna");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Especialidad", b =>
                {
                    b.Property<int>("IdEspecialidad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidad"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEspecialidad");

                    b.ToTable("Especialidad");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.EspecialidadMedico", b =>
                {
                    b.Property<int>("IdEspecialidadMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEspecialidadMedico"));

                    b.Property<string>("CasaEstudio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaObtencionEspecialidad")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.HasKey("IdEspecialidadMedico");

                    b.HasIndex("IdEspecialidad");

                    b.HasIndex("IdMedico");

                    b.ToTable("EspecialidadMedico", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.EstadoAgendaMedico", b =>
                {
                    b.Property<int>("IdEstadoAgendaMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoAgendaMedico"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombreEstadoAgendaMedico")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstadoAgendaMedico");

                    b.ToTable("EstadoAgendaMedico");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.EstadoFichaClinica", b =>
                {
                    b.Property<int>("IdEstadoFichaClinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadoFichaClinica"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombreEstadoFichaClinica")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstadoFichaClinica");

                    b.ToTable("EstadoFichaClinica");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.FichaClinica", b =>
                {
                    b.Property<long>("IdFichaClinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdFichaClinica"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaAtencion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstadoFichaClinica")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdModulo")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int?>("IdPersonal")
                        .HasColumnType("int");

                    b.HasKey("IdFichaClinica");

                    b.HasIndex("IdEstadoFichaClinica");

                    b.HasIndex("IdMedico");

                    b.HasIndex("IdModulo");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdPersonal");

                    b.ToTable("FichaClinica", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.FichaClinicaDetalle", b =>
                {
                    b.Property<long>("IdFichaClinicaDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdFichaClinicaDetalle"));

                    b.Property<string>("AgudezaVisual")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("FondoDeOjo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdFichaClinica")
                        .HasColumnType("bigint");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresionIntraocular")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdFichaClinicaDetalle");

                    b.HasIndex("IdFichaClinica");

                    b.ToTable("FichaClinicaDetalle", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.HistorialClinico", b =>
                {
                    b.Property<long>("IdHistorialClinico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdHistorialClinico"));

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaHistorial")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<string>("Nota")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdHistorialClinico");

                    b.HasIndex("IdPaciente");

                    b.ToTable("HistorialClinico", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.LugarAtencion", b =>
                {
                    b.Property<int>("IdLugarAtencion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLugarAtencion"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Fono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HorarioAtencion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdComuna")
                        .HasColumnType("int");

                    b.Property<string>("NombreLugar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdLugarAtencion");

                    b.HasIndex("IdComuna");

                    b.ToTable("LugarAtencion", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Medicamento", b =>
                {
                    b.Property<int>("IdMedicamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicamento"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombreMedicamento")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedicamento");

                    b.ToTable("Medicamento");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Medico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedico"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rut")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMedico");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Modulo", b =>
                {
                    b.Property<int>("IdModulo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<int>("IdLugarAtencion")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdModulo");

                    b.ToTable("Modulo", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<string>("ApellidoMaterno")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rut")
                        .HasColumnType("int");

                    b.Property<string>("Sexo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPaciente");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.PacienteAdultoMayor", b =>
                {
                    b.Property<int>("IdPacienteAdultoMayor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AutoValente")
                        .HasColumnType("bit");

                    b.Property<bool>("Dependencia")
                        .HasColumnType("bit");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("IdPacienteAdultoMayor");

                    b.ToTable("PacienteAdultoMayor", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.PacienteDiabetico", b =>
                {
                    b.Property<int>("IdPacienteDiabetico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Amputacion")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecAmputacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecEvaluacionDiabetes")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecNeuropatia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecRetinopatia")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<bool>("Neuropatia")
                        .HasColumnType("bit");

                    b.Property<bool>("Retinopatia")
                        .HasColumnType("bit");

                    b.HasKey("IdPacienteDiabetico");

                    b.ToTable("PacienteDiabetico", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Patologia", b =>
                {
                    b.Property<int>("IdPatologia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPatologia"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("NombrePatologia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPatologia");

                    b.ToTable("Patologia");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.PatologiaPaciente", b =>
                {
                    b.Property<long>("IdPatologiaPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdPatologiaPaciente"));

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecComplicacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("IdPatologia")
                        .HasColumnType("int");

                    b.HasKey("IdPatologiaPaciente");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdPatologia");

                    b.ToTable("PatologiaPaciente", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Personal", b =>
                {
                    b.Property<int>("IdPersonal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPersonal"));

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rut")
                        .HasColumnType("int");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPersonal");

                    b.ToTable("Personal");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.RecetaMedica", b =>
                {
                    b.Property<int>("IdRecetaMedica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRecetaMedica"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FecActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FecInicio")
                        .HasColumnType("datetime2");

                    b.Property<long>("IdHistorialClinico")
                        .HasColumnType("bigint");

                    b.Property<int>("IdMedicamento")
                        .HasColumnType("int");

                    b.Property<string>("Instrucciones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRecetaMedica");

                    b.HasIndex("IdHistorialClinico");

                    b.HasIndex("IdMedicamento");

                    b.ToTable("RecetaMedica", (string)null);
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.AgendaMedico", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.EstadoAgendaMedico", "EstadoAgendaMedico")
                        .WithMany("AgendaMedicos")
                        .HasForeignKey("IdEstadoAgendaMedico")
                        .IsRequired()
                        .HasConstraintName("FK_AgendaMedico_EstadoAgendaMedico");

                    b.HasOne("AtencionMedica.Domain.Entities.Medico", "Medico")
                        .WithMany("AgendaMedicos")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_AgendaMedico_Medico");

                    b.Navigation("EstadoAgendaMedico");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.ComplicacionPaciente", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Complicacion", "Complicacion")
                        .WithMany("ComplicacionPacientes")
                        .HasForeignKey("IdComplicacion")
                        .IsRequired()
                        .HasConstraintName("FK_ComplicacionPaciente_Complicacion");

                    b.HasOne("AtencionMedica.Domain.Entities.Paciente", "Paciente")
                        .WithMany("ComplicacionPacientes")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_ComplicacionPaciente_Paciente");

                    b.Navigation("Complicacion");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.EspecialidadMedico", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Especialidad", "Especialidad")
                        .WithMany("EspecialidadMedicos")
                        .HasForeignKey("IdEspecialidad")
                        .IsRequired()
                        .HasConstraintName("FK_EspecialidadMedico_Especialidad");

                    b.HasOne("AtencionMedica.Domain.Entities.Medico", "Medico")
                        .WithMany("EspecialidadMedicos")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_EspecialidadMedico_Medico");

                    b.Navigation("Especialidad");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.FichaClinica", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.EstadoFichaClinica", "EstadoFichaClinica")
                        .WithMany("FichaClinicas")
                        .HasForeignKey("IdEstadoFichaClinica")
                        .IsRequired()
                        .HasConstraintName("FK_FichaClinica_EstadoFichaClinica");

                    b.HasOne("AtencionMedica.Domain.Entities.Medico", "Medico")
                        .WithMany("FichaClinicas")
                        .HasForeignKey("IdMedico")
                        .IsRequired()
                        .HasConstraintName("FK_FichaClinica_Medico");

                    b.HasOne("AtencionMedica.Domain.Entities.Modulo", "Modulo")
                        .WithMany("FichaClinicas")
                        .HasForeignKey("IdModulo")
                        .IsRequired()
                        .HasConstraintName("FK_FichaClinica_Modulo");

                    b.HasOne("AtencionMedica.Domain.Entities.Paciente", "Paciente")
                        .WithMany("FichaClinicas")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_FichaClinica_Paciente");

                    b.HasOne("AtencionMedica.Domain.Entities.Personal", "Personal")
                        .WithMany("FichaClinicas")
                        .HasForeignKey("IdPersonal")
                        .HasConstraintName("FK_FichaClinica_Personal");

                    b.Navigation("EstadoFichaClinica");

                    b.Navigation("Medico");

                    b.Navigation("Modulo");

                    b.Navigation("Paciente");

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.FichaClinicaDetalle", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.FichaClinica", "FichaClinica")
                        .WithMany("FichaClinicaDetalles")
                        .HasForeignKey("IdFichaClinica")
                        .IsRequired()
                        .HasConstraintName("FK_FichaClinicaDetalle_FichaClinica");

                    b.Navigation("FichaClinica");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.HistorialClinico", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Paciente", "Paciente")
                        .WithMany("HistorialClinicos")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_HistorialClinico_Paciente");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.LugarAtencion", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Comuna", "Comuna")
                        .WithMany("LugarAtenciones")
                        .HasForeignKey("IdComuna")
                        .IsRequired()
                        .HasConstraintName("FK_LugarAtencion_Comuna");

                    b.Navigation("Comuna");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Modulo", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.LugarAtencion", "LugarAtencion")
                        .WithMany("Modulos")
                        .HasForeignKey("IdModulo")
                        .IsRequired()
                        .HasConstraintName("FK_Modulo_LugarAtencion");

                    b.Navigation("LugarAtencion");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.PacienteAdultoMayor", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Paciente", "Paciente")
                        .WithMany("PacienteAdultoMayors")
                        .HasForeignKey("IdPacienteAdultoMayor")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteAdultoMayor_Paciente");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.PacienteDiabetico", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Paciente", "Paciente")
                        .WithMany("PacienteDiabeticos")
                        .HasForeignKey("IdPacienteDiabetico")
                        .IsRequired()
                        .HasConstraintName("FK_PacienteDiabetico_Paciente");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.PatologiaPaciente", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.Paciente", "Paciente")
                        .WithMany("PatologiaPacientes")
                        .HasForeignKey("IdPaciente")
                        .IsRequired()
                        .HasConstraintName("FK_PatologiaPaciente_Paciente");

                    b.HasOne("AtencionMedica.Domain.Entities.Patologia", "Patologia")
                        .WithMany("PatologiaPacientes")
                        .HasForeignKey("IdPatologia")
                        .IsRequired()
                        .HasConstraintName("FK_PatologiaPaciente_Patologia");

                    b.Navigation("Paciente");

                    b.Navigation("Patologia");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.RecetaMedica", b =>
                {
                    b.HasOne("AtencionMedica.Domain.Entities.HistorialClinico", "HistorialClinico")
                        .WithMany("RecetaMedicas")
                        .HasForeignKey("IdHistorialClinico")
                        .IsRequired()
                        .HasConstraintName("FK_RecetaMedica_HistorialClinico");

                    b.HasOne("AtencionMedica.Domain.Entities.Medicamento", "Medicamento")
                        .WithMany("RecetaMedicas")
                        .HasForeignKey("IdMedicamento")
                        .IsRequired()
                        .HasConstraintName("FK_RecetaMedica_Medicamento");

                    b.Navigation("HistorialClinico");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Complicacion", b =>
                {
                    b.Navigation("ComplicacionPacientes");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Comuna", b =>
                {
                    b.Navigation("LugarAtenciones");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Especialidad", b =>
                {
                    b.Navigation("EspecialidadMedicos");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.EstadoAgendaMedico", b =>
                {
                    b.Navigation("AgendaMedicos");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.EstadoFichaClinica", b =>
                {
                    b.Navigation("FichaClinicas");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.FichaClinica", b =>
                {
                    b.Navigation("FichaClinicaDetalles");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.HistorialClinico", b =>
                {
                    b.Navigation("RecetaMedicas");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.LugarAtencion", b =>
                {
                    b.Navigation("Modulos");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Medicamento", b =>
                {
                    b.Navigation("RecetaMedicas");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Medico", b =>
                {
                    b.Navigation("AgendaMedicos");

                    b.Navigation("EspecialidadMedicos");

                    b.Navigation("FichaClinicas");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Modulo", b =>
                {
                    b.Navigation("FichaClinicas");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Paciente", b =>
                {
                    b.Navigation("ComplicacionPacientes");

                    b.Navigation("FichaClinicas");

                    b.Navigation("HistorialClinicos");

                    b.Navigation("PacienteAdultoMayors");

                    b.Navigation("PacienteDiabeticos");

                    b.Navigation("PatologiaPacientes");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Patologia", b =>
                {
                    b.Navigation("PatologiaPacientes");
                });

            modelBuilder.Entity("AtencionMedica.Domain.Entities.Personal", b =>
                {
                    b.Navigation("FichaClinicas");
                });
#pragma warning restore 612, 618
        }
    }
}
